{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Version: 0.0.1 Updated: Wed Jan 4 What is iterative Website Development Reduces website lifetime cost by using contemporary website technology Markdown \u00b6 The primary website programming language is Markdown, not the troika standard HTML,CSS, and JavaScript languages. Each is a strict foreign language. Markdown is not Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different. For example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold ). It may take a while to get used to seeing Markdown syntax in your text, especially if you\u2019re accustomed to WYSIWYG applications GitHub \u00b6 GitHub manages an online web hosted Central Website Repo GitHub is a Distributed Version Control Systems enabling multiple team members to work separately on the same project without having an impact on the work of others. It is a unified source of truth. It helps teams collaborate and maintain the entire history, project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"Iterative website development"},{"location":"#markdown","text":"The primary website programming language is Markdown, not the troika standard HTML,CSS, and JavaScript languages. Each is a strict foreign language. Markdown is not Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different. For example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold ). It may take a while to get used to seeing Markdown syntax in your text, especially if you\u2019re accustomed to WYSIWYG applications","title":"Markdown"},{"location":"#github","text":"GitHub manages an online web hosted Central Website Repo GitHub is a Distributed Version Control Systems enabling multiple team members to work separately on the same project without having an impact on the work of others. It is a unified source of truth. It helps teams collaborate and maintain the entire history, project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"GitHub"},{"location":"git-github/","text":"Version Control \u00b6 Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later VCS \u00b6 A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time. About version control and Git \u00b6 About version control and Git GitHub \u00b6 GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project Getting Started \u00b6 Getting Started How GitHub works \u00b6 How GitHub works Basic Git Commands \u00b6 Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git: git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit. git status shows the status of changes as untracked, modified, or staged. git branch shows the branches being worked on locally. git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push updates the remote repository with any commits made locally to a branch. For more information, see the Full Reference Guide To Git Commands . Models for collaborative development \u00b6 Models for collaborative development Importing a Git repository using the command line \u00b6 Importing a Git repository using the command line","title":"Git-Github"},{"location":"git-github/#version-control","text":"Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later","title":"Version Control"},{"location":"git-github/#vcs","text":"A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time.","title":"VCS"},{"location":"git-github/#about-version-control-and-git","text":"About version control and Git","title":"About version control and Git"},{"location":"git-github/#github","text":"GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"GitHub"},{"location":"git-github/#getting-started","text":"Getting Started","title":"Getting Started"},{"location":"git-github/#how-github-works","text":"How GitHub works","title":"How GitHub works"},{"location":"git-github/#basic-git-commands","text":"Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git: git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit. git status shows the status of changes as untracked, modified, or staged. git branch shows the branches being worked on locally. git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push updates the remote repository with any commits made locally to a branch. For more information, see the Full Reference Guide To Git Commands .","title":"Basic Git Commands"},{"location":"git-github/#models-for-collaborative-development","text":"Models for collaborative development","title":"Models for collaborative development"},{"location":"git-github/#importing-a-git-repository-using-the-command-line","text":"Importing a Git repository using the command line","title":"Importing a Git repository using the command line"}]}
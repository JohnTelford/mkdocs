{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Iterative website development","text":"<p>This site is about lowering website development costs. It describes developing websites using Iterative Website Development.</p> <p>Creating, adding features and functions, and maintaining websites that meet users needs is difficult, complex, time consuming, and expensive. Team members support  is a large part of website total lifetime costs.</p>  <p>Some times companies may have little interest in how their websites are constructed, as long as they have the features and functionality needed to satisfy their target market. The cost of errors, security, remediation's, adding features, and functionality, during the life time of the website, dramatically increases website lifetime costs.</p>"},{"location":"#what-is-iterative-website-development","title":"What is Iterative Website Development","text":"<p>It is a way of creating websites using web development disciplines and technologies to reduce website lifetime cost. Web sites software development is a process that requires teamwork and cooperation. </p> <p>Team members independently or collaborative iterate and test new functionality, and remediate defects of the website under development or deployed, lowering   lifetime costs </p>"},{"location":"collaborative/","title":"Collaborative","text":"<p>There are two primary ways people collaborate on GitHub:</p> <ul> <li>Shared repository</li> <li>Fork and pull</li> </ul> <p>With a shared repository, individuals and teams are explicitly designated as contributors with read, write, or administrator access. This simple permission structure, combined with features like protected branches, helps teams progress quickly when they adopt GitHub.</p> <p>For an open source project, or for projects to which anyone can contribute, managing individual permissions can be challenging, but a fork and pull model allows anyone who can view the project to contribute. A fork is a copy of a project under a developer's personal account. Every developer has full control of their fork and is free to implement a fix or a new feature. Work completed in forks is either kept separate, or is surfaced back to the original project via a pull request. There, maintainers can review the suggested changes before they're merged. For more information, see \"Contributing to projects.\"</p>"},{"location":"company/","title":"Company","text":"<p>I am the sole proprietor of JohnTelford.com LLC technology consulting company, working with client  development projects for more that 30 years.</p>"},{"location":"company/#collaboration","title":"Collaboration","text":"<p>A seasoned, knowledgeable, industry professional, Electronics, Software, and Web engineer specializing in web hardware and software technology disciplines, Architecture, Architecture, and Deployment.</p> <ul> <li>Practitioner with extensive experience across most IT functional groups</li> <li>Ability to effectively collaborate to accomplish multidiscipline goals:<ul> <li>Senior management teams</li> <li>External and internal clients</li> <li>Functional groups</li> <li>Individual contributors</li> <li>Vendors</li> </ul> </li> </ul>"},{"location":"company/#nuggets","title":"Nuggets","text":"<p>Way back when the Internet web browsers and programming languages came along, I became interested in web technologies, and began learn by doing technology deep dives. I have years of learning some ever changing Electronics, Internet, and Software technologies by hands-on experiencing the technologies du jour</p> <p>I have a passion pursuing what\u2019s new and improved with these industries. Checking out what\u2019s new or not, a pipe dream or not, or what\u2019s new and improved, is like panning for gold. Buried within the mountains of info rubble produced daily, every so often one finds interesting technology nuggets making the effort worthwhile. I use the Hype Curve as a guide</p>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#title-contact","title":"title :Contact","text":"<p>Info</p> <ul> <li>A labyrinth symbolizes possible difficulties reaching website project goals. </li> <li>My knowledge and experience with website technology disciplines may be helpful.</li> </ul>   <p>John Telford Portland, Oregon JohnTelford.com LLC</p> <p>phone : text 503-312-7248</p> <p>Email</p>"},{"location":"defect_remediation_cost/","title":"Defect Remediation Costs\u200b","text":"<ul> <li> <p>The highest cost over the life time of website projects is remediating defects.</p> </li> <li> <p>Content and software defects cost less when found early, as this chart shows:</p> </li> </ul>"},{"location":"defect_remediation_cost/#defect-remediation-costs","title":"Defect Remediation Costs","text":"<p>The early defect detection mechanisms built into Iterative Development and MkDocs site generator are:</p> <ul> <li> <p>VScode editor tool extensions continually check for syntax and other errors</p> <ul> <li>Fast refresh live-editing quickly showing changes and any runtime errors while typing</li> </ul> </li> <li> <p>Team members deploy their copy of the project repository with their changes, to private websites where stakeholders can see them and give feedback. See Preview Deployments</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"dev_stack_details/","title":"Dev Stack Details","text":""},{"location":"dev_stack_details/#github-and-git-details","title":"GitHub and Git Details","text":"<ul> <li> <p>A Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. </p> </li> <li> <p>It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project</p> </li> </ul>"},{"location":"dev_stack_details/#github-workflow","title":"GitHub Workflow","text":"<ul> <li>GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow.</li> </ul> <p>A summary of GitHub workflow for each team member is:</p> <ol> <li>Fork the central project repository creating a local project repository in individual team members GitHub account</li> <li>Clone the forked local project repository in team member GitHub account to workstation</li> <li>Creates a topic Branch off the cloned local project repository main branch</li> <li>Make topic edits and commits </li> <li>Push after each commit to the cloned local project repository in GitHub account</li> <li>Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests</li> <li>Periodically deploy local project repository to a private Preview  website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website.</li> <li>Open a Pull Request on the GitHub local project repository to begin the  process of integrating the local project repository with the central project repository  </li> <li>Team members discuss, and optionally continue committing on Pull Requests.</li> </ol>"},{"location":"dev_stack_details/#git-details","title":"Git Details","text":"<ul> <li>Git is not the same as GitHub.</li> <li> <p>GitHub makes tools that use Git.### The Project Gatekeeper </p> </li> <li> <p>Merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview  website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet </p> </li> <li> <p>Teams may Pull the central project repository at anytime to view and test other topic branches.</p> </li> </ul>"},{"location":"dev_stack_details/#reference","title":"Reference","text":"<ul> <li>What is Git and GitHub</li> <li>GitHub</li> <li>Git</li> </ul>"},{"location":"dev_stack_details/#vscode","title":"VScode","text":"<p>Introduction Videos</p>"},{"location":"development_tools/","title":"Development Tools","text":""},{"location":"development_tools/#vscode","title":"VScode","text":"<p>Visual Studio Code (VScode) is a Microsoft product.</p> <p>It has become the goto editor for many. It is free, built on open source, and runs everywhere.</p> <p>VScode is the command and control center for the website development stack.</p> <p>The development command and control tasks are:</p> <ul> <li>Editing Markdown and Markdown web programming materials</li> <li>Use git and GitHub to manage project files. Git is built-in and optimized to work with Microsoft GitHub</li> <li>Editor tool extensions continually check for syntax and other errors</li> <li>Live edit browser previews show how edits will look when deployed</li> <li>Deploy secure website previews to the Internet for stakeholders</li> <li>Deploy production website to the Internet</li> <li>Built-in command shell</li> <li>And much more</li> </ul>"},{"location":"development_tools/#extensions","title":"Extensions","text":"<p>Useful extensions are:</p> <ul> <li> <p>Dark+ Material. The default Dark+ theme, using Material's color palette</p> </li> <li> <p>ESlint. Integrates ESLint JavaScript into VS Code</p> </li> <li> <p>GitHub Repositories. Remotely browse and edit any GitHub repository</p> </li> <li> <p>Lorem Text Generator Lorem text generator extension for VScode</p> </li> <li> <p>Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more)</p> </li> <li> <p>Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets</p> </li> <li> <p>Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar</p> </li> <li> <p>VScode-icons Icons for Visual Studio Code</p> </li> </ul>"},{"location":"development_tools/#git-client","title":"Git Client","text":"<p>VScode built-in git commands :</p> <ul> <li>Review diffs, </li> <li>Stage files</li> <li>Make commits</li> <li>Push </li> <li>pull</li> <li>and more</li> </ul>"},{"location":"development_tools/#git-desktop","title":"Git Desktop","text":"<p>An alternative to using these built-in VScode commands is to use GitHub Desktop. It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. </p> <p>GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode. </p>"},{"location":"development_tools/#git-and-github-references","title":"Git and GitHub References","text":"<p>These Git and Github references contain concepts and commands:</p> <ul> <li>Version Control System</li> <li>VScode built-in gitg commands</li> <li>Git version-control tools in Visual Studio Code</li> <li>Git and GitHub Introduction</li> <li>Git</li> <li>GitHub</li> <li>GitHub Desktop</li> </ul>"},{"location":"development_tools/#github","title":"GitHub","text":"<p>The core technologies of Iterative Development are, Git and GitHub. The central project repository is controlled by the project gatekeeper, and a content delivery network, like Cloudflare, where Internet production websites and individual team private Preview Internet websites, are deployed.</p> <p>GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes.</p>  <p>It helps answer the questions for the lifetime of the project who changed what, where, when, and why? </p>  <p>Team members use the Website Development Stack to develop and deploy websites to the Internet.</p>"},{"location":"development_tools/#the-github-workflow","title":"The GitHub Workflow","text":"<p>GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow.</p> <p>A summary of GitHub workflow for each team member is:</p> <ol> <li>Fork the central project repository creating a local project repository in individual team members GitHub account</li> <li>Clone the forked local project repository in team member GitHub account to workstation</li> <li>Creates a topic Branch off the cloned local project repository main branch</li> <li>Make topic edits and commits </li> <li>Push after each commit to the cloned local project repository in GitHub account</li> <li>Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests</li> <li>Periodically deploy local project repository to a private Preview  website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website.</li> <li>Open a Pull Request on the GitHub local project repository to begin the  process of integrating the local project repository with the central project repository  </li> <li>Team members discuss, and optionally continue committing on Pull Requests.</li> </ol> <p>The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview  website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet </p> <p>Teams may Pull the central project repository at anytime to view and test other topic branches.</p>"},{"location":"development_tools/#git","title":"Git","text":"<p>Git Tutorial</p>"},{"location":"development_tools/#fork","title":"Fork","text":"<p>Git GitHub Fork</p> <p>A fork is a copy of the project repository in a team member's GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command</p> <p>Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository</p> <p>Forking a repository is similar to copying a repository, with two major differences:</p> <ul> <li> <p>You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository.</p> </li> <li> <p>You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository.</p> </li> </ul> <p>Fork a Repo</p>"},{"location":"development_tools/#clone","title":"Clone","text":"<p>Git Clone from GitHub</p> <p>A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation.</p> <p>Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation.</p>"},{"location":"development_tools/#branch","title":"Branch","text":"<p>Git Branch</p> <p>Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea</p> <p>Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. </p> <p>Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast!</p>"},{"location":"development_tools/#checkout","title":"Checkout","text":""},{"location":"development_tools/#switch","title":"Switch","text":"<p>Switches to a new branch</p> <p>A quick way of switching branch on Git is to use the <code>git switch</code> command and specify the name of the branch you want to switch.</p> <p>If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch.</p> <p>$ git switch  <p>$ git switch -c  Again, as an example, let\u2019s say that you want to switch to the \u201cfeature\u201d branch from the \u201cmaster\u201d branch. <p>In order to switch from the \u201cmaster\u201d branch to the \u201cfeature\u201d branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case)</p> <p>$ git switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message</p> <p>$ git switch non-existing-branch</p> <p>fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch.</p> <p>$ git switch -c non-existing-branch</p> <p>Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it.</p>"},{"location":"development_tools/#git-desktop_1","title":"Git Desktop","text":"<p>Git Desktop is an alternative to using VScode built-in Git commands. It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. It is a Microsoft product available on Mac and Windows.</p> <p>GitHub Desktop and VSCode documents explain how to use GitHub Desktop with VScode. </p>"},{"location":"development_tools/#ia-writer","title":"iA Writer","text":"<p>Editing Markdown / MDX website pages and blog posts using iA Writer is faster because of focus and grammar features with live preview.</p>  <ul> <li>iA Writer is a Markdown Writing app:<ul> <li>Faster way to write MDX website material </li> <li>Extensive Style Check</li> <li>Focus<ul> <li>Sentence</li> <li>Paragraph</li> </ul> </li> <li>Available for Mac, iOS, Windows, and Android</li> </ul> </li> </ul> <p>The Mac iA Writer stores files in iCloud. They are available for editing using supported devices when there is an internet connection.</p>"},{"location":"development_tools/#chronosync","title":"Chronosync","text":"<p>When one or more pages have been edited using iA Writer, the  ChronoSync Mac app is used to synchronize files between iA Writer and the local repository. Since the  iA Writer files are store in iCloud, they are available for editing using supported devices when there is an internet connection.</p> <p>If edits have been made to files the local repository, use ChronoSync to synchronize them to iA Writer.</p>   <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"git-github%20copy/","title":"Git github copy","text":"<p>Version control system records changes to files  over time so specific versions can be recalled later</p> <p>When teams make changes to project files, the version control system tracks the history of changes. Earlier version of project files can be recovered at any time.</p> <p>The version primary components are GigHub, Git, and VScode</p>"},{"location":"git-github%20copy/#version-control-and-git","title":"Version Control and Git","text":""},{"location":"git-github%20copy/#github","title":"GitHub","text":"<p>GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project</p> <p>About version control and Git</p>"},{"location":"git-github%20copy/#getting-started","title":"Getting Started","text":"<p>Getting Started</p>"},{"location":"git-github%20copy/#how-github-works","title":"How GitHub works","text":"<p>How GitHub works</p>"},{"location":"git-github%20copy/#git","title":"git","text":"<p>Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode.</p> <p>Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes.</p> <p>In addition to being distributed, Git has been designed with performance, security and flexibility in mind.</p>"},{"location":"git-github%20copy/#basic-git-commands","title":"Basic Git Commands","text":"<p>Basic Git Commands</p> <p>To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:</p>"},{"location":"git-github%20copy/#git-init","title":"git init","text":"<p><code>git init</code> initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.</p>"},{"location":"git-github%20copy/#git-clone","title":"git clone","text":"<p><code>git clone</code> creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.</p>"},{"location":"git-github%20copy/#git-add","title":"git add","text":"<p><code>git add</code> stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.</p>"},{"location":"git-github%20copy/#git-commit","title":"git commit","text":"<p><code>git commit</code> saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.</p>"},{"location":"git-github%20copy/#git-status","title":"git status","text":"<p><code>git status</code> shows the status of changes as untracked, modified, or staged.</p>"},{"location":"git-github%20copy/#git-branch","title":"git branch","text":"<p><code>git branch</code> shows the branches being worked on locally.</p>"},{"location":"git-github%20copy/#git-merge","title":"git merge","text":"<p><code>git merge</code> merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.</p>"},{"location":"git-github%20copy/#git-pull","title":"git pull","text":"<p><code>git pull</code> updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.</p>"},{"location":"git-github%20copy/#git-push","title":"git push","text":"<p><code>git push</code> updates the remote repository with any commits made locally to a branch.</p>"},{"location":"git-github%20copy/#full-reference-guide-to-git-commands","title":"Full Reference Guide To Git Commands","text":"<p>Full Reference Guide To Git Commands.</p>"},{"location":"git-github%20copy/#models-for-collaborative-development","title":"Models for collaborative development","text":"<p>Models for collaborative development</p>"},{"location":"git-github%20copy/#importing-a-git-repository-using-the-command-line","title":"Importing a Git repository using the command line","text":"<p>Importing a Git repository using the command line</p>"},{"location":"git-github/","title":"Git github","text":"<p>Version control system records changes to files  over time so specific versions can be recalled later</p> <p>When teams make changes to project files, the version control system tracks the history of changes. Earlier version of project files can be recovered at any time.</p> <p>The version primary components are GigHub, Git, and VScode</p>"},{"location":"git-github/#version-control-and-git","title":"Version Control and Git","text":""},{"location":"git-github/#github","title":"GitHub","text":"<p>GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project</p> <p>About version control and Git</p>"},{"location":"git-github/#getting-started","title":"Getting Started","text":"<p>Getting Started</p>"},{"location":"git-github/#how-github-works","title":"How GitHub works","text":"<p>How GitHub works</p>"},{"location":"git-github/#git","title":"git","text":"<p>Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode.</p> <p>Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes.</p> <p>In addition to being distributed, Git has been designed with performance, security and flexibility in mind.</p>"},{"location":"git-github/#basic-git-commands","title":"Basic Git Commands","text":"<p>Basic Git Commands</p> <p>To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:</p>"},{"location":"git-github/#git-init","title":"git init","text":"<p><code>git init</code> initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.</p>"},{"location":"git-github/#git-clone","title":"git clone","text":"<p><code>git clone</code> creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.</p>"},{"location":"git-github/#git-add","title":"git add","text":"<p><code>git add</code> stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.</p>"},{"location":"git-github/#git-commit","title":"git commit","text":"<p><code>git commit</code> saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.</p>"},{"location":"git-github/#git-status","title":"git status","text":"<p><code>git status</code> shows the status of changes as untracked, modified, or staged.</p>"},{"location":"git-github/#git-branch","title":"git branch","text":"<p><code>git branch</code> shows the branches being worked on locally.</p>"},{"location":"git-github/#git-merge","title":"git merge","text":"<p><code>git merge</code> merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.</p>"},{"location":"git-github/#git-pull","title":"git pull","text":"<p><code>git pull</code> updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.</p>"},{"location":"git-github/#git-push","title":"git push","text":"<p><code>git push</code> updates the remote repository with any commits made locally to a branch.</p>"},{"location":"git-github/#full-reference-guide-to-git-commands","title":"Full Reference Guide To Git Commands","text":"<p>Full Reference Guide To Git Commands.</p>"},{"location":"git-github/#models-for-collaborative-development","title":"Models for collaborative development","text":"<p>Models for collaborative development</p>"},{"location":"git-github/#importing-a-git-repository-using-the-command-line","title":"Importing a Git repository using the command line","text":"<p>Importing a Git repository using the command line</p>"},{"location":"git/","title":"Git","text":"<p>Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode.</p> <p>Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes.</p> <p>In addition to being distributed, Git has been designed with performance, security and flexibility in mind.</p>"},{"location":"git/#basic-git-commands","title":"Basic Git Commands","text":"<p>Basic Git Commands</p> <p>To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:</p>"},{"location":"git/#git-init","title":"git init","text":"<p><code>git init</code> initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.</p>"},{"location":"git/#git-clone","title":"git clone","text":"<p><code>git clone</code> creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.</p>"},{"location":"git/#git-add","title":"git add","text":"<p><code>git add</code> stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.</p>"},{"location":"git/#git-commit","title":"git commit","text":"<p><code>git commit</code> saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.</p>"},{"location":"git/#git-status","title":"git status","text":"<p><code>git status</code> shows the status of changes as untracked, modified, or staged.</p>"},{"location":"git/#git-branch","title":"git branch","text":"<p><code>git branch</code> shows the branches being worked on locally.</p>"},{"location":"git/#git-merge","title":"git merge","text":"<p><code>git merge</code> merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.</p>"},{"location":"git/#git-pull","title":"git pull","text":"<p><code>git pull</code> updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.</p>"},{"location":"git/#git-push","title":"git push","text":"<p><code>git push</code> updates the remote repository with any commits made locally to a branch.</p>"},{"location":"git/#full-reference-guide-to-git-commands","title":"Full Reference Guide To Git Commands","text":"<p>Full Reference Guide To Git Commands.</p>"},{"location":"git/#models-for-collaborative-development","title":"Models for collaborative development","text":"<p>Models for collaborative development</p>"},{"location":"git/#importing-a-git-repository-using-the-command-line","title":"Importing a Git repository using the command line","text":"<p>Importing a Git repository using the command line</p>"},{"location":"github/","title":"GitHub","text":"<p>GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project</p> <p>About version control and Git</p>"},{"location":"github/#getting-started","title":"Getting Started","text":"<p>Getting Started</p>"},{"location":"github/#how-github-works","title":"How GitHub works","text":"<p>How GitHub works</p>"},{"location":"github/#how-we-use-github-to-be-more-productive-collaborative-and-secure","title":"How we use GitHub to be more productive, collaborative, and secure","text":"<p>How we use GitHub to be more productive, collaborative, and secure</p> <p>GitHub is free for teams</p>"},{"location":"hype_curve/","title":"Hype Curve","text":"<p> The Hype Curve helps separate reality from fiction. </p> <p>  </p>  Hype Curve"},{"location":"hype_curve/#points-of-interest","title":"Points of Interest","text":"<p>The Hype Curve points of interest are:</p> <ul> <li> <p>Technology Trigger</p> <p>A potential technology breakthrough happens.</p> </li> <li> <p>Peak of Inflated Expectations  </p> <p>Early publicity produces a number of success stories and often accompanied by stories of failures. Some companies may take corrective action but most don\u2019t.</p> </li> <li> <p>Trough of Disillusionment</p> <p>Interest wanes as experiments and implementations fail to deliver on the hype.</p> </li> <li> <p>Slope of Enlightenment</p> <p>Technology consumers begin to understand the technology better and how it may benefit them.</p> </li> <li> <p>Plateau of Productivity</p> <p>Mainstream adoption starts to take off. Some technologies making it to the Plateau of Productivity may be doomed to the spiral of death by inattention to details of keeping products alive.</p> </li> </ul>"},{"location":"hype_curve/#some-hype-curve-guesstimates","title":"Some Hype Curve Guesstimates","text":"<p>Here are some of my guesstimates of where a few technologies are on their Hype Curve roller coster ride</p> <p>Some have crashed and burned, while others are will speeding to the Peak of Inflated Expectations where bubbles pop, while others are deflated and may make it to the Trough of Disillusionment. a few may have energy</p> <p>Every day there is more hype about technology. This is just a sampling:</p> <ul> <li> <p>5G Hype</p> <ul> <li> <p>Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger.</p> </li> <li> <p>A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't.</p> </li> <li> <p>A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers.</p> </li> <li> <p>Some of the reasons for such service are the flavors of 5G.</p> <ul> <li> <p>Low-Band</p> </li> <li> <p>Mid-Band</p> </li> <li> <p>High-Band</p> </li> </ul> </li> <li> <p>The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. </p> </li> <li> <p>The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi?</p> </li> </ul> </li> </ul>  <ul> <li> <p>Self-driving Cars</p> <ul> <li> <p>Self-driving cars, also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input.</p> </li> <li> <p>Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race.</p> <ul> <li> <p>Levels of Autonomous Driving</p>  <p>Levels of Autonomous Driving, Explained</p> <pre><code>\"To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles. &gt;\n</code></pre>  </li> </ul> <p>If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary.</p> <p>In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so.</p> <p>As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\"</p> </li> </ul> </li> <li> <p>Where We Are</p> <p>Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems.</p>  <p>This is not a self-driving car. \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" </p> <p>Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" </p>  </li> </ul>  <ul> <li> <p>Metaverse</p> <ul> <li> <p>Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality.</p> </li> <li> <p>Facebook, oops Meta, states</p>  <p>The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine </p>  </li> <li> <p>Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.</p> </li> </ul> </li> </ul>"},{"location":"hype_guesstimates/","title":"Hype Guesstimates","text":"<p>Here are some of my Hype Curve guesstimates of where a few technologies are on their Hype Curve roller coster ride</p> <p>Some have crashed and burned, while others are will speeding to the Peak of Inflated Expectations where bubbles pop, while others are deflated and may make it to the Trough of Disillusionment. a few may have energy</p> <p>Every day there is more hype about technology. This is just a sampling:</p>"},{"location":"hype_guesstimates/#5g-hype","title":"5G Hype","text":"<ul> <li> <p>Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger.</p> </li> <li> <p>A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't.</p> </li> <li> <p>A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers.</p> <ul> <li> <p>Some of the reasons for such service are the flavors of 5G.</p> <ul> <li> <p>Low-Band</p> </li> <li> <p>Mid-Band</p> </li> <li> <p>High-Band</p> </li> </ul> </li> <li> <p>The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. </p> </li> <li> <p>The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi?</p> </li> </ul> </li> </ul>"},{"location":"hype_guesstimates/#self-driving-cars","title":"Self-driving Cars","text":"<ul> <li> <p>Self-driving cars, also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input.</p> </li> <li> <p>Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race.</p> </li> <li> <p>Levels of Autonomous Driving Explained</p> </li> <li> <p>To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles</p> </li> <li> <p>If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary.</p> </li> <li> <p>In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so.</p> </li> <li> <p>As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\"</p> </li> <li> <p>Where We Are</p> <p>Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems.</p>  <p>This is not a self-driving car. \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" </p> <p>Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" </p>  </li> </ul>  <ul> <li> <p>Metaverse</p> <ul> <li> <p>Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality.</p> </li> <li> <p>Facebook, oops Meta, states:</p> </li> </ul>  <p>The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine </p>  <ul> <li>Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.</li> </ul> </li> </ul>"},{"location":"markdown/","title":"Markdown","text":""},{"location":"markdown/#markdown","title":"Markdown","text":"<p>The primary MkDocs website programming language is Markdown, not the standard HTML,CSS, and JavaScript languages. Each is a strict foreign language requiring developers to know the languages and are able to use them. Check out the Markdown language at Markdown Guide.</p> <p>Using Markdown is different then using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.</p> <p>For example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you\u2019re accustomed to WYSIWYG applications</p>"},{"location":"material_mkdocs/","title":"Material MkDocs","text":""},{"location":"material_mkdocs/#material-mkdocs","title":"Material MkDocs","text":"<p>Material MkDocs is a theme for MkDocs. It is a static website generator compiling Markdown source files into standard HTML, CSS, and JavaScript web browser languages files, and places them on an internal MkDocs web server. The developer access the MkDocs web server the workstation browser.</p> <p>Creating websites using the standard HTML, CSS, and JavaScript web browser requires developers who know these languages and are able to use them. Creating websites with MkDocs only requires knowing Markdown, not a strict foreign language</p> <p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p> <p>Readability, however, is emphasized above all else. A Markdown-formatted document can be publishable as-is, as plain text, without looking like it\u2019s been marked up with tags or formatting instructions.</p> <p>Markdown\u2019s syntax uses punctuation characters, which have been carefully chosen so as to look like what they mean. For example, asterisks around the word <code>*emphasis*</code>  looks like  emphasis. Double asterisks around the word <code>**bold**</code> looks like  bold. Markdown lists look like, well, lists. Even block-quotes look like quoted passages of text, assuming you\u2019ve ever used email.</p> <p>Built-in formatting commands are quicker and easier to use than manually typing the Markdown punctuation characters.</p> <p>The compiling process can also be done by a Content Delivery Network using MkDocs to compile the Markdown files and places them on an internal MkDocs web server. The Content Delivery Network deploys the MkDocs web server to the Internet.</p> <p>What the developer sees on the workstation is exactly what the Content Delivery Network delivers to the Internet.</p> <p>Configuring the Content Delivery Network enables developers to frequently deploy their work to private internet Previews website for stakeholders, interested parties, and other Teams to see their work and provide feedback.</p>  <p>MkDocs: - Speeds up websites development - Compiles Markdown files to standard HTML, CSS, and JavaScript files for web browsers - Provides Internal Web Server for Workstation preview - Content Delivery Network provides Private Internet preview websites - Content Delivery Network provides Production Internet websites</p> <p>Material MkDocs:</p>"},{"location":"minimum_viable_product/","title":"Minimum Viable Product\u200b","text":"<p>The first goal of website development projects is a Minimum Viable Product.</p> <ul> <li> <p>It is a way to understand whether the website project idea will work or not. It is a stage in website development where the must features are implemented and ready to test with end-users. It gives feedback about the positive aspects and shortcomings.</p> </li> <li> <p>The next steps are adding the want features, until stakeholders agree the website is production quality and ready to be deployment.</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"preview/","title":"Preview Private Website","text":"<p>As team members makes changes to their Local Website Repository, they may deploy it to a Private Preview Website for stakeholders to quickly view and give feedback.</p> <p>When team members and stakeholders agree the changes are ready to be added to the Production Website, the team member makes a Central Website Repository update request</p> <p>The repository guardian and other team members evaluating Central Website Repository update requests, may deploy them to a Private Preview Internet Website for stake holders to preview and give feedback.</p>"},{"location":"preview/#repository-guardian-preview","title":"Repository Guardian Preview","text":"<p>When the repository guardian and other team members evaluating Central Website Repository update requests changes are ready for deployment, the repository guardian deploys the updated production version of the website to a Private Preview Website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet</p>"},{"location":"programming/","title":"Programming","text":""},{"location":"programming/#languages","title":"Languages","text":""},{"location":"programming/#troika","title":"Troika","text":"<p>:::info Troika is a team of three web website programming languages that have become standard for creating web pages, HTML, CSS, and JavaScript.  They are interpreted  by web browsers to rendering website pages. :::</p> <p>The job of website development frameworks is to compile the troika and non troika programming languages, such as MDX and JSX, into a combination the standard troika languages to be executed in web browsers.</p>"},{"location":"programming/#html","title":"Hypertext Markup Language","text":"<p>HTML is used to create websites. It is the standard markup language for browser website pages. It defines the content and structure of website pages. HTML can be assisted by Cascading Style Sheets (CSS) to instruct browsers how elements are to be styled and rendered, and JavaScript is for user interactivity.</p>"},{"location":"programming/#mdx","title":"MDX","text":"<p>MDX is Markdown for the component era. It enables seamlessly writing JSX in Markdown documents. It is compiled to JSX components, It enables using Markdown\u2019s terse syntax for writing website material, and JSX for components.</p> <p>Markdown is a faster way of creating and maintaining website material. It is a HTLM abstraction that is compiled to web standard HTML</p> <p>John Gruber published the original Markdown Syntax Guide. Different flavors of Markdown have evolved since then.</p> <p>\"Markdown is a better way to write HTML. It is compiled into HTML at deploy time. Markdown is a lightweight plaintext markup language used to add formatting elements to documents. Markdown is now one of the world\u2019s popular markup languages. Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown is not like that. In a Markdown-formatted file. Markdown syntax is added to the text to indicate which words and phrases look different.\"</p> <p>Markdown has been characterized by an informal specification and a reference implementation for conversion to HTML. Over time, many Markdown implementations have appeared. They are driven by the need for additional features like tables, footnotes, definition lists, and HTML inside Markdown blocks. The behavior of additional features diverge from the reference implementation and informal specification, and have attracted attention. Not all flavors of Markdown are compatible or supported by all frameworks.</p> <p>I'm hesitant creating website material without using a version of Markdown. My preference is using MDX.</p> <p>\u2764\ufe0f Powerful: MDX blends markdown and JSX syntax to fit perfectly in React/JSX-based projects.</p>  <p>\ud83d\udcbb Everything is a component: Use existing components inside MDX file and import other MDX files as plain components.</p> <p>\ud83d\udd27 Customizable: Decide which component is rendered for each markdown element.</p> <p>\ud83d\udcda Markdown-based: The simplicity and elegance of markdown remains, JSX is interleaved when you want to.</p> <p>\ud83d\udd25 Blazingly blazing fast: MDX has no runtime, all compilation occurs during the build stage.\"</p>"},{"location":"programming/#other-languages","title":"Other Languages","text":"<p>:::info Other languages besides the Troika are frequently needed to create and deploy websites :::</p> <p>Some are:</p>"},{"location":"programming/#editor-commands","title":"Editor commands","text":""},{"location":"programming/#website-material","title":"Website Material","text":"<ul> <li> <p>Troika</p> </li> <li> <p>MDX</p> </li> </ul>"},{"location":"programming/#command-line-interface","title":"Command-line interface","text":"<p>Operating system (OS) command-line interfaces are usually distinct programs supplied with the operating system. A program that implements such a text interface is often called a command-line interpreter, command processor or shell. </p>"},{"location":"programming/#version-control-system","title":"Version Control System","text":"<ul> <li> <p>git commands</p> </li> <li> <p>GitHub commands</p> </li> </ul>"},{"location":"programming/#static-static-site-generator-commands","title":"Static Static Site Generator commands","text":""},{"location":"programming/#deploy-commands","title":"Deploy commands","text":"<p>:::</p>   <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"remediation/","title":"remediation.md","text":"<p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"site_config/","title":"Site config","text":""},{"location":"site_config/#cloudflare-deployment-root-files","title":"Cloudflare deployment root files","text":"<p>Cloudflare Pages</p> <ul> <li> <p>mkdocs root dir <code>requirements.txt</code> </p> <ul> <li> <p>mkdocs-material version  </p> </li> <li> <p>pip show mkdocs-material  </p> </li> <li> <p>mkdocs-material==    <li> <p>mkdocs root dir <code>runtime.txt</code> Python version 3.7  </p> <p>3.7</p> </li> <li> <p>Environment variables:  </p> <p>Variable name: ZOLA_VERSION</p> <p>Value: 0.13.0</p> </li>"},{"location":"site_config/#upgrade-material-mkdocs","title":"Upgrade Material MkDocs","text":"<p>Upgrade to the latest version with:</p> <p><code>pip install --upgrade --force-reinstall mkdocs-material</code></p> <p>Show the currently installed version with:</p> <p><code>pip show mkdocs-material</code></p>"},{"location":"team_define/","title":"Team - Define","text":"<p>Defining websites helps the Iterative Development teams and stakeholders understand the project.</p>"},{"location":"team_define/#define-prerequisites","title":"Define - Prerequisites","text":"<p>Defining website prerequisites is the first steps in optimizing website costs</p> <ul> <li> <p>Defining what the project is about</p> </li> <li> <p>Funding</p> </li> <li> <p>Purpose</p> </li> <li> <p>Functionality</p> </li> <li> <p>Stakeholders</p> </li> <li> <p>Content</p> </li> <li> <p>The musts and wants features</p> </li> <li> <p>The security requirements</p> </li> </ul>"},{"location":"team_deploy/","title":"Team - Deploy","text":"<ul> <li> <p>Deploying a website is making it available on the Internet. The production version is deployed when stakeholders agree.</p> </li> <li> <p>Developers working on features, fixes, or testing may deploy a private Preview website with their changes, without disturbing other developers work or the production version. This enables the stakeholders to monitor progress. See Preview Deployments</p> </li> <li> <p>The slightest errors or security issues during Deploy will require Remediating sometime during the life time of the website</p> </li> </ul>"},{"location":"team_deploy/#deploy-prerequisites","title":"Deploy - Prerequisites","text":"<ul> <li> <p>Decisions about resources required for deploying production version of the website to the Internet</p> </li> <li> <p>Decisions about resources required for team developers working on features, fixes, or testing to deploy private Preview Internet websites with their changes, for stake holders to view and give feedback, without disturbing other developers work or the production version</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"team_design/","title":"Team - Design","text":"<p>The core foundations of a user's website experience are:</p> <ul> <li> <p>Fast - Website responds quickly to user interactions with smooth scrolling.</p> </li> <li> <p>Integrated - The website uses the full capabilities of the user device to create an experience true to the device.</p> </li> <li> <p>Reliable - Loads quickly and reliably even in uncertain network conditions.</p> </li> <li> <p>Engaging - Keeps user coming back to a website</p> </li> </ul>"},{"location":"team_design/#design-prerequisites","title":"Design - Prerequisites","text":"<ul> <li> <p>Decisions about Website Design</p> </li> <li> <p>Consistency</p> </li> <li> <p>Theme</p> </li> <li> <p>Color Scheme</p> </li> <li> <p>Typology</p> </li> <li> <p>Navigation</p> </li> <li> <p>User interaction</p> </li> </ul>"},{"location":"team_design/#design-website","title":"Design - Website","text":"<ul> <li> <p>Responsive Website Design</p> <p>The majority of users access websites using mobile devices. Users have little tolerance for slow loading website pages or pages that do not conform to their screen size</p> </li> <li> <p>Ensures pages load quickly</p> </li> <li> <p>Website pages are display correctly on a variety of devices and window or screen size</p> </li> <li> <p>The website look and feel, users experience, and functionality are consistently maintain</p> </li> <li> <p>Consistency website consistency is the look and feel of the site. The users experience, and functionality does not vary between website pages.</p> </li> <li> <p>The website theme is:</p> <ul> <li> <p>Color scheme</p> </li> <li> <p>Header</p> </li> <li> <p>Pages</p> </li> <li> <p>Fonts</p> </li> <li> <p>Footer</p> </li> <li> <p>Typology</p> </li> <li> <p>Navigation</p> </li> <li> <p>User interaction</p> </li> </ul> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"team_develop/","title":"Team - Develop","text":"<ul> <li> <p>Translates the Define and Design teams processes into website pages </p> </li> <li> <p>Uses development languages to create website material such as text, graphics, and abstract logical structures. These languages are nonhuman, and strict </p> </li> <li> <p>Configures and uses website development tools</p> </li> </ul>"},{"location":"team_develop/#develop-prerequisites","title":"Develop - Prerequisites","text":"<ul> <li> <p>Decisions about resources required to transform the Define and Design work into a website and infrastructure</p> </li> <li> <p>Decisions about static site generator and programming tools</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"team_maintenance/","title":"Maintenance Team","text":"<ul> <li> <p>Maintain is remediating Define, Design,Develop, Deploy, or Security defects</p> </li> <li> <p>All teams may have members on the Maintain team to solve defects.</p> </li> <li> <p>Hot fixes are immediate fixes required for the production deployment.</p> </li> <li> <p>Problems requiring remediation are triaged. They are ranked from immediate Hot Fixes to those that are not show stoppers.</p> </li> <li> <p>The guardian and stakeholders may choose to Rollback the production deployment to a previous production deployment if triage determines the remediation time is unacceptable.</p> </li> <li> <p>All fixes use the established fork, solution development, pull request processes, and version incrementing, including Hot Fixes.</p> </li> </ul>"},{"location":"team_maintenance/#maintenance-prerequisites","title":"Maintenance - Prerequisites","text":"<ul> <li> <p>Decisions about remediating deployed websites</p> </li> <li> <p>Organizing members from other teams to be part of the Maintain team while remediating specific defects.</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"team_overview/","title":"Team Overview","text":""},{"location":"team_overview/#overview","title":"Overview","text":"<p>Iterative website Define, Design, Develop, Deploy and Maintenance teams may be operational at the same time creating, testing, and helping with maintenance  </p>  Teams <pre><code>    graph TD\n    dev --- def\n    dev --- des\n    dev --- dep\n    dev --- mnt\n    def --- des\n    dep --- mnt\n\n    dev([Development])\n    def([Define])\n    des([Design])\n    dep([Deploy])\n    mnt([Maintenance])</code></pre> Iterative Development Teams  <p>Reach a Minimum Viable Product is the first Development teams goal</p> <ul> <li> <p>Team Define    Defining websites helps the Iterative Development helps teams and stakeholders understand the project.</p> </li> <li> <p>Team Design   Determines the core found   ations of a user's website experience are:</p> </li> <li> <p>Team Develop   Translates the Define and Design teams processes into website pages </p> </li> <li> <p>Team Deploy   Deploys the website making it available on the Internet. The production version is deployed when stakeholders agree.</p> </li> <li> <p>Team Maintenance   Remediates the Define, Design, Develop, Deploy, or Security teams defects</p> </li> </ul>  <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"vscode/","title":"VScode","text":"<p>Visual Studio Code is a Microsoft product and commonly referred to as VS Code. It is a code editor redefined and optimized for building and debugging modern web and cloud applications. Visual Studio Code is free and available on platforms Linux, macOS, and Windows.</p> <p>Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded git</p> <p>Developer surveys show Visual Studio Code is ranked the most popular developer environment tool </p> <p>Introduction Videos</p> <p>VScode - Details is the command and control center for the website development stack.</p> <p>The development command and control tasks are:</p> <ul> <li>Editing Markdown web programming materials</li> <li>Use GitHub and Git - Details. <code>Git</code> is built-in and optimized to work with Microsoft <code>GitHub</code></li> <li>Editor tool extensions continually check for syntax and other errors</li> <li>Live edit browser previews show how edits will look when deployed</li> <li>Deploy secure website previews to the Internet for stakeholders</li> <li>Deploy production website to the Internet</li> <li>Built-in command shell</li> <li>And much more</li> </ul>"},{"location":"vscode/#extensions","title":"Extensions","text":"<p>Some useful extensions are:</p> <ul> <li> <p>Dark+ Material. The default Dark+ theme, using Material's color palette</p> </li> <li> <p>GitHub Repositories. Remotely browse and edit any GitHub repository</p> </li> <li> <p>Lorem Text Generator Lorem text generator extension for VScode</p> </li> <li> <p>Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more)</p> </li> <li> <p>Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets</p> </li> <li> <p>Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar</p> </li> <li> <p>VScode-icons Icons for Visual Studio Code</p> </li> </ul>"},{"location":"vscode/#git-client","title":"Git Client","text":"<p>VScode built-in git commands :</p> <ul> <li>Review diffs, </li> <li>Stage files</li> <li>Make commits</li> <li>Push </li> <li>pull</li> <li>and more</li> </ul>"},{"location":"vscode/#git-desktop","title":"Git Desktop","text":"<p>Alternatives to using built-in VScode git commands is to use the built in terminal or GitHub Desktop. It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. </p> <p>GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode. </p>"},{"location":"website_dev_stack/","title":"Iterative Website Development","text":"<p>Abstract</p> <p>The Iterative Website Development Stack illustrates how websites are developed by teams and deployed to the Internet. It is web browser agnostic. What works for big screens, works for small screens.</p>    <pre><code>flowchart TB\n\n    crepo --- cdn\n\n    cdn --- net\n\n    dev --- vsc \n\n    github --- crepo\n\n    github --- net\n\n    vsc --- lrepo\n\n    net --- prevweb\n\n    net --- proweb\n\n    vsc --- net\n\n    vsc --- mkd\n\n    mkd --- lpreweb\n\n    dev([Team Developers])\n\n    cdn([CDN - Deploy Website to Web])\n\n    crepo([Central Website Repository])\n\n    github([GitHub]) \n\n    lrepo([Local Website Repository])\n\n    lpreweb([Local Preview Website])\n\n    mkd([Mkdocs Material - Static Site Generator])\n\n    net([Internet]) \n\n    prevweb([Stake Holders Private Preview Website])\n\n    proweb([Production Website])\n\n    vsc([VScode - Command and Control]) \n</code></pre> Iterative Website Development Stack  <p>The Iterative Development teams use the Iterative Website Development Stack technologies</p> <ul> <li>The core technologies of Iterative WebsiteDevelopment are Git, the GitHuGitHub central project repository controlled by the project gatekeeper,  using Local Website Repository, the content delivery network, like Cloudflare, to deploying private Preview Internet websites, production websites, and .</li> </ul> <p>The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a Content Delivery Network (CDN), like Cloudflare, deploying Private Preview Internet websites, production websites, and individual team members Private Preview websites.</p>"},{"location":"website_dev_stack/#team-developers","title":"Team Developers","text":"<ul> <li> <p>Local Website Repository      Each team developer has their own Local Website Repository that can be updated from the Central Website Repository. Team members cannot update the Central Web Repository directly. They submit their changes. The approved changes by the project gatekeeper are added to the Central Website Repository. Team members can then update their Local Website Repository.</p> </li> <li> <p>VScode      Developers use VSCode as their Web Development Stack Command and Control center. They use it to edit code using their Local Website Repository, commit changes to the Central Website Repository, refresh their Local Website Repository, and deploy Private Preview Internet websites for themselves and stake holders to view and give feedback</p> </li> </ul>"},{"location":"website_dev_stack/#github","title":"GitHub","text":"<p>GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project</p> <p>The Central Website Repository is managed by a team member project gatekeeper with help from other team members</p> <ul> <li>Reference GitHub Details</li> </ul>"},{"location":"website_dev_stack/#mkdocs-material-static-site-generator","title":"MkDocs Material - Static Site Generator","text":"<p>Is a Static Site Generator used to build a website from Repository to create:</p> <ul> <li> <p>A Local Preview Website for the developer</p> </li> <li> <p>The Production Website deployed to the Internet</p> </li> <li> <p>Stake Holders Private Preview Website  </p> </li> </ul> <p>It is also used by the Content Delivery network(CDN) do build and deploy the production website from the Central Repository</p>"},{"location":"website_dev_stack/#content-delivery-network-cdn","title":"Content Delivery Network (CDN)","text":"<p>A \"MkDocs Static Site Generator\" tools are used to create the \"Production Website\" by the \"CDN - Deploy Website to Web\"</p>"},{"location":"website_dev_stack/#github_1","title":"GitHub","text":"<p>Central Repository.  </p>  <p>The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare, deploying private Preview Internet websites, production websites, and individual team members private Preview websites. </p> <p>GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes.</p> <p>The Central Repository is managed my a team member</p> <p>It helps answer the questions for the lifetime of the project who changed what, where, when, and why? for the lifetime of the project</p>    <p>Team members use the Website Development Stack to develop, deploy, and maintain websites to the Internet. </p> <p>There would be confusion and possible defects created if Team members were to directly make changes to the central project repository.  </p> <p>A solution to this problem is to have one central repository controlled by a team member gatekeeper. Each team member forks a copy of central project repository to their GetHub account and makes a clone of it on their workstation.</p> <p>Each developer makes changes to their repository clone. They cannot directly make changes to the central repository.</p>  <pre><code>- Team members commit changes to their local repository clone\n\n- They may deploy their local repository to a private [Preview](preview.md) Internet website for stakeholders to see and give feedback.\n</code></pre> <ul> <li> <p>The process is managed using GitHub for Teams. When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub Pull Request is made by developers to the central project repository. </p> <ul> <li> <p>Project team members and the gatekeeper are notified by GitHub of the Pull Request request. They may examine, comment on, suggest possible changes, and test the code. </p> </li> <li> <p>When the team agrees on committed developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for all developer committed changes. </p> </li> <li> <p>Iterations of the central project repository may be deployed by the gatekeeper to a private Preview  for stakeholders viewing. </p> </li> </ul> </li> <li> <p>The next step is each developer Pulls the central repository changes and commits them to their local repository copy of the central project. This process keeps team members up to date on changes.</p> </li> <li> <p>The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations.</p> </li> </ul>   <p>Defects</p> <p>The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs </p>"},{"location":"workstations/","title":"Workstations","text":"<p>Workstations are the key hardware for website developers</p> <p>Web site development is not easy, time consuming, and expensive. Optimizing the website development environment is critical.</p> <p>The key hardware for website developers are workstations. They need to be:</p> <ul> <li>Fast</li> <li>Reliable</li> <li>Supportable</li> <li>Secure</li> <li>Support Large or Multiple Screens</li> <li>Run Software Development Applications</li> </ul> <p>The contemporary choice for web development workstations are Apple, Linux, and Microsoft. I have experience building web sites with purchased and bare metal built Linux systems and bare metal built Microsoft systems. I use apple products for exploring Internet technologies and creating web sites.</p> <p>Traditionally these companies built workstation products with Intel processors. They are diversifying their product line with ARM-based and RISC-architecture processors</p>"},{"location":"workstations/#apple","title":"Apple","text":"<p>Apple is a computer manufacturing company delivering workstation products with Apple developed macOS certified UNIX operating systems.</p> <p>Apple has released Mac products built with the ARM-based, M2 Apple silicon designed, processors, and the macOS Big Sur operating system engineered to use M1 chip capabilities.</p> <p>The last Apple processor transition was the Motorola 68000 to the Intel x86. It took time for Apple vendors and users to update their hardware and software to run on the x86. Apple created the Rosetta translation application that ran Motorola 68000 binary code on x86 machines. The M2 translation layer Rosetta 2, is about 80% the speed of the of native Apple Silicon code. The single-core Rosetta 2 benchmark running on a low end M1 MacBook Air with 8GB of RAM, is faster than other x86 Mac machines in single core benchmark. The M2 MacBook Air running native is faster than any competitors top of the line x86 machine, except for a couple.</p> <p>Apple products prices may be higher than their competitors. It is mitigated by the quality of hardware and software, robustness, security, and vendor support.</p> <p>Any web developer workstation downtime is expensive. The advantages of Apple products are robustness, reliability, security, speed, vendor hardware and software support, and relative ease of use. Apple has responsibility for maintaining hardware and software products from sale to retirement. Apple Stores and other services are equipped to diagnose and repair Apple products.</p> <p>Operating systems updates have been free for years, and work when applied. Apple continues to have the highest customer satisfaction in the industry.</p>"},{"location":"workstations/#linux","title":"Linux","text":"<p>Linux is an examples of free and open-source software collaboration. The source code may be used, modified and distributed commercially or non-commercially by anyone under the terms of its respective licenses</p> <p>Linux is the leading operating system on web servers. Its greatest success in the consumer market is mobile device. Android being one of the dominant smartphones Linux-based operating system</p> <p>There are a some Linux vendor supporting hardware platforms or Linux software distributions. The diversity of Linux distributions means that not all software or hardware runs all distributions or applications. Software and hardware repositories may be specific to particular distributions</p> <p>Not all peripheral device vendors support Linux. The Linux open-source community supplies several missing device drivers.</p> <p>The price of Linux-based systems is attractive. The operating system software is free. Ready-made hardware platforms are available, or can be bare metal built by choosing hardware and software components, and having the skills to assemble and maintain them.</p> <p>The robustness, reliability, security, and speed of Linux systems varies from low to high, depending on the knowledge and skills of the vendors, builders and maintainers</p> <p>Responsibility for maintaining Linux workstation hardware, operating systems, and device drivers is fragmented or doesn't exist, except from some vendors, builders and maintainers</p> <p>There are computer repair services that are equipped to diagnosed and repaired Linux systems, but not to the extent of Apple Stores</p>"},{"location":"workstations/#microsoft","title":"Microsoft","text":"<p>Many companies sell hardware platforms with Microsoft Windows installed. Many peripheral device vendors support Windows drivers.</p> <p>Consumer versions of Windows were originally designed for ease-of-use on a single-user PC without a network connection, and did not have security features built in from the outset. Windows updates are regularly improving security.</p> <p>Windows is one of hackers prime data hunting grounds, even with frequent security updates. Windows systems are everywhere and stores or has access to vast amounts of data. There are Windows installations that do not keep Windows updated. One reason may be issues with updates. Microsoft Windows update problem 2022 are recent examples.</p> <p>The reliability, robustness, security, and supportability of Microsoft systems varies from low to high, depending on the knowledge and skills of vendors, builders and maintainers. The combinations and permutations of vendor hardware platforms, software applications, and peripheral vendors and device support, may be contributing to Microsoft Windows update problems.</p> <p>There are computer repair services that are equipped to diagnosed and repaired Windows systems, but not to the extent of Apple Stores.</p>   <p>Workstations from these vendors are being used to develop web sited. Some are better than others.</p> <p>Building web sites with purchased and bare metal built Linux systems and bare metal built Microsoft systems. I use apple products for exploring Internet technologies and creating web sites. </p>"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Version: 0.0.1 Updated: Wed Jan 5 What is iterative Website Development Reduces website lifetime cost by using contemporary website technology Markdown \u00b6 The primary website programming language is Markdown, not the troika standard HTML,CSS, and JavaScript languages. Each is a strict foreign language. Markdown is not Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different. For example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold ). It may take a while to get used to seeing Markdown syntax in your text, especially if you\u2019re accustomed to WYSIWYG applications GitHub \u00b6 GitHub manages an online web hosted Central Website Repo GitHub is a Distributed Version Control Systems enabling multiple team members to work separately on the same project without having an impact on the work of others. It is a unified source of truth. It helps teams collaborate and maintain the entire history, project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"Iterative website development"},{"location":"#markdown","text":"The primary website programming language is Markdown, not the troika standard HTML,CSS, and JavaScript languages. Each is a strict foreign language. Markdown is not Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different. For example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold ). It may take a while to get used to seeing Markdown syntax in your text, especially if you\u2019re accustomed to WYSIWYG applications","title":"Markdown"},{"location":"#github","text":"GitHub manages an online web hosted Central Website Repo GitHub is a Distributed Version Control Systems enabling multiple team members to work separately on the same project without having an impact on the work of others. It is a unified source of truth. It helps teams collaborate and maintain the entire history, project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"GitHub"},{"location":"collaborative/","text":"There are two primary ways people collaborate on GitHub: Shared repository Fork and pull With a shared repository, individuals and teams are explicitly designated as contributors with read, write, or administrator access. This simple permission structure, combined with features like protected branches, helps teams progress quickly when they adopt GitHub. For an open source project, or for projects to which anyone can contribute, managing individual permissions can be challenging, but a fork and pull model allows anyone who can view the project to contribute. A fork is a copy of a project under a developer's personal account. Every developer has full control of their fork and is free to implement a fix or a new feature. Work completed in forks is either kept separate, or is surfaced back to the original project via a pull request. There, maintainers can review the suggested changes before they're merged. For more information, see \"Contributing to projects.\"","title":"Collaborative Development"},{"location":"git-github%20copy/","text":"Version control system records changes to files over time so specific versions can be recalled later When teams make changes to project files, the version control system tracks the history of changes. Earlier version of project files can be recovered at any time. The version primary components are GigHub , Git , and VScode Version Control and Git \u00b6 GitHub \u00b6 GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project About version control and Git Getting Started \u00b6 Getting Started How GitHub works \u00b6 How GitHub works git \u00b6 Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode. Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes. In addition to being distributed, Git has been designed with performance, security and flexibility in mind. Basic Git Commands \u00b6 Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git: git init \u00b6 git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone \u00b6 git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add \u00b6 git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit \u00b6 git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit. git status \u00b6 git status shows the status of changes as untracked, modified, or staged. git branch \u00b6 git branch shows the branches being worked on locally. git merge \u00b6 git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull \u00b6 git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push \u00b6 git push updates the remote repository with any commits made locally to a branch. Full Reference Guide To Git Commands \u00b6 Full Reference Guide To Git Commands . Models for collaborative development \u00b6 Models for collaborative development Importing a Git repository using the command line \u00b6 Importing a Git repository using the command line","title":"Git github copy"},{"location":"git-github%20copy/#version-control-and-git","text":"","title":"Version Control and Git"},{"location":"git-github%20copy/#github","text":"GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project About version control and Git","title":"GitHub"},{"location":"git-github%20copy/#getting-started","text":"Getting Started","title":"Getting Started"},{"location":"git-github%20copy/#how-github-works","text":"How GitHub works","title":"How GitHub works"},{"location":"git-github%20copy/#git","text":"Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode. Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes. In addition to being distributed, Git has been designed with performance, security and flexibility in mind.","title":"git"},{"location":"git-github%20copy/#basic-git-commands","text":"Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:","title":"Basic Git Commands"},{"location":"git-github%20copy/#git-init","text":"git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.","title":"git init"},{"location":"git-github%20copy/#git-clone","text":"git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.","title":"git clone"},{"location":"git-github%20copy/#git-add","text":"git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.","title":"git add"},{"location":"git-github%20copy/#git-commit","text":"git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.","title":"git commit"},{"location":"git-github%20copy/#git-status","text":"git status shows the status of changes as untracked, modified, or staged.","title":"git status"},{"location":"git-github%20copy/#git-branch","text":"git branch shows the branches being worked on locally.","title":"git branch"},{"location":"git-github%20copy/#git-merge","text":"git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.","title":"git merge"},{"location":"git-github%20copy/#git-pull","text":"git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.","title":"git pull"},{"location":"git-github%20copy/#git-push","text":"git push updates the remote repository with any commits made locally to a branch.","title":"git push"},{"location":"git-github%20copy/#full-reference-guide-to-git-commands","text":"Full Reference Guide To Git Commands .","title":"Full Reference Guide To Git Commands"},{"location":"git-github%20copy/#models-for-collaborative-development","text":"Models for collaborative development","title":"Models for collaborative development"},{"location":"git-github%20copy/#importing-a-git-repository-using-the-command-line","text":"Importing a Git repository using the command line","title":"Importing a Git repository using the command line"},{"location":"git-github/","text":"Version control system records changes to files over time so specific versions can be recalled later When teams make changes to project files, the version control system tracks the history of changes. Earlier version of project files can be recovered at any time. The version primary components are GigHub , Git , and VScode Version Control and Git \u00b6 GitHub \u00b6 GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project About version control and Git Getting Started \u00b6 Getting Started How GitHub works \u00b6 How GitHub works git \u00b6 Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode. Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes. In addition to being distributed, Git has been designed with performance, security and flexibility in mind. Basic Git Commands \u00b6 Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git: git init \u00b6 git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone \u00b6 git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add \u00b6 git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit \u00b6 git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit. git status \u00b6 git status shows the status of changes as untracked, modified, or staged. git branch \u00b6 git branch shows the branches being worked on locally. git merge \u00b6 git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull \u00b6 git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push \u00b6 git push updates the remote repository with any commits made locally to a branch. Full Reference Guide To Git Commands \u00b6 Full Reference Guide To Git Commands . Models for collaborative development \u00b6 Models for collaborative development Importing a Git repository using the command line \u00b6 Importing a Git repository using the command line","title":"Git github"},{"location":"git-github/#version-control-and-git","text":"","title":"Version Control and Git"},{"location":"git-github/#github","text":"GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project About version control and Git","title":"GitHub"},{"location":"git-github/#getting-started","text":"Getting Started","title":"Getting Started"},{"location":"git-github/#how-github-works","text":"How GitHub works","title":"How GitHub works"},{"location":"git-github/#git","text":"Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode. Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes. In addition to being distributed, Git has been designed with performance, security and flexibility in mind.","title":"git"},{"location":"git-github/#basic-git-commands","text":"Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:","title":"Basic Git Commands"},{"location":"git-github/#git-init","text":"git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.","title":"git init"},{"location":"git-github/#git-clone","text":"git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.","title":"git clone"},{"location":"git-github/#git-add","text":"git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.","title":"git add"},{"location":"git-github/#git-commit","text":"git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.","title":"git commit"},{"location":"git-github/#git-status","text":"git status shows the status of changes as untracked, modified, or staged.","title":"git status"},{"location":"git-github/#git-branch","text":"git branch shows the branches being worked on locally.","title":"git branch"},{"location":"git-github/#git-merge","text":"git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.","title":"git merge"},{"location":"git-github/#git-pull","text":"git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.","title":"git pull"},{"location":"git-github/#git-push","text":"git push updates the remote repository with any commits made locally to a branch.","title":"git push"},{"location":"git-github/#full-reference-guide-to-git-commands","text":"Full Reference Guide To Git Commands .","title":"Full Reference Guide To Git Commands"},{"location":"git-github/#models-for-collaborative-development","text":"Models for collaborative development","title":"Models for collaborative development"},{"location":"git-github/#importing-a-git-repository-using-the-command-line","text":"Importing a Git repository using the command line","title":"Importing a Git repository using the command line"},{"location":"git/","text":"Git is the most widely used modern version control system in the world today. Git is mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and Integrated Development Environments such as VScode. Git Distributed Version Control System. Rather than have only one single place for the full version history of the software as in Git, every developer's working copy of the code is also a repository that can contain the full history of all changes. In addition to being distributed, Git has been designed with performance, security and flexibility in mind. Basic Git Commands \u00b6 Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git: git init \u00b6 git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone \u00b6 git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add \u00b6 git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit \u00b6 git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit. git status \u00b6 git status shows the status of changes as untracked, modified, or staged. git branch \u00b6 git branch shows the branches being worked on locally. git merge \u00b6 git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull \u00b6 git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push \u00b6 git push updates the remote repository with any commits made locally to a branch. Full Reference Guide To Git Commands \u00b6 Full Reference Guide To Git Commands . Models for collaborative development \u00b6 Models for collaborative development Importing a Git repository using the command line \u00b6 Importing a Git repository using the command line","title":"Git"},{"location":"git/#basic-git-commands","text":"Basic Git Commands To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:","title":"Basic Git Commands"},{"location":"git/#git-init","text":"git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.","title":"git init"},{"location":"git/#git-clone","text":"git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.","title":"git clone"},{"location":"git/#git-add","text":"git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.","title":"git add"},{"location":"git/#git-commit","text":"git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.","title":"git commit"},{"location":"git/#git-status","text":"git status shows the status of changes as untracked, modified, or staged.","title":"git status"},{"location":"git/#git-branch","text":"git branch shows the branches being worked on locally.","title":"git branch"},{"location":"git/#git-merge","text":"git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.","title":"git merge"},{"location":"git/#git-pull","text":"git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.","title":"git pull"},{"location":"git/#git-push","text":"git push updates the remote repository with any commits made locally to a branch.","title":"git push"},{"location":"git/#full-reference-guide-to-git-commands","text":"Full Reference Guide To Git Commands .","title":"Full Reference Guide To Git Commands"},{"location":"git/#models-for-collaborative-development","text":"Models for collaborative development","title":"Models for collaborative development"},{"location":"git/#importing-a-git-repository-using-the-command-line","text":"Importing a Git repository using the command line","title":"Importing a Git repository using the command line"},{"location":"github/","text":"GitHub is is a Distributed Version Control Systems is a Microsoft product. It enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project About version control and Git Getting Started \u00b6 Getting Started How GitHub works \u00b6 How GitHub works","title":"GitHub"},{"location":"github/#getting-started","text":"Getting Started","title":"Getting Started"},{"location":"github/#how-github-works","text":"How GitHub works","title":"How GitHub works"},{"location":"preview/","text":"As team members makes changes to their Local Website Repository, they may deploy it to a Private Preview Website for stakeholders to quickly view and give feedback. When team members and stakeholders agree the changes are ready to be added to the Production Website, the team member makes a Central Website Repository update request The repository guardian and other team members evaluating Central Website Repository update requests, may deploy them to a Private Preview Internet Website for stake holders to preview and give feedback. Repository Guardian Preview \u00b6 When the repository guardian and other team members evaluating Central Website Repository update requests changes are ready for deployment, the repository guardian deploys the updated production version of the website to a Private Preview Website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet","title":"Preview"},{"location":"preview/#repository-guardian-preview","text":"When the repository guardian and other team members evaluating Central Website Repository update requests changes are ready for deployment, the repository guardian deploys the updated production version of the website to a Private Preview Website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet","title":"Repository Guardian Preview"},{"location":"site_config/","text":"Cloudflare deployment root files \u00b6 Cloudflare Pages mkdocs root dir requirements.txt mkdocs-material version pip show mkdocs-material mkdocs-material==<mkdocs-material version> mkdocs root dir runtime.txt Python version 3.7 3.7 Environment variables: Variable name: ZOLA_VERSION Value: 0.13.0","title":"Site Config"},{"location":"site_config/#cloudflare-deployment-root-files","text":"Cloudflare Pages mkdocs root dir requirements.txt mkdocs-material version pip show mkdocs-material mkdocs-material==<mkdocs-material version> mkdocs root dir runtime.txt Python version 3.7 3.7 Environment variables: Variable name: ZOLA_VERSION Value: 0.13.0","title":"Cloudflare deployment root files"},{"location":"vscode/","text":"Visual Studio Code is a Microsoft product and commonly referred to as VS Code. It is a code editor redefined and optimized for building and debugging modern web and cloud applications. Visual Studio Code is free and available on platforms Linux, macOS, and Windows. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded git Developer surveys show Visual Studio Code is ranked the most popular developer environment tool Introduction Videos VScode - Details is the command and control center for the website development stack. The development command and control tasks are: Editing Markdown web programming materials Use GitHub and Git - Details . Git is built-in and optimized to work with Microsoft GitHub Editor tool extensions continually check for syntax and other errors Live edit browser previews show how edits will look when deployed Deploy secure website previews to the Internet for stakeholders Deploy production website to the Internet Built-in command shell And much more Extensions \u00b6 Some useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code Git Client \u00b6 VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more Git Desktop \u00b6 Alternatives to using built-in VScode git commands is to use the built in terminal or GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode .","title":"VScode"},{"location":"vscode/#extensions","text":"Some useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code","title":"Extensions"},{"location":"vscode/#git-client","text":"VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more","title":"Git Client"},{"location":"vscode/#git-desktop","text":"Alternatives to using built-in VScode git commands is to use the built in terminal or GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode .","title":"Git Desktop"},{"location":"website_dev_stack/","text":"Abstract The Iterative Website Development Stack illustrates how websites are developed by teams and deployed to the Internet. It is web browser agnostic. What works for big screens, works for small screens. flowchart TB crepo --- cdn cdn --- net dev --- vsc github --- crepo github --- net vsc --- lrepo net --- prevweb net --- proweb vsc --- net vsc --- mkd mkd --- lpreweb dev([Team Developers]) cdn([CDN - Deploy Website to Web]) crepo([Central Website Repository]) github([GitHub]) lrepo([Local Website Repository]) lpreweb([Local Preview Website]) mkd([Mkdocs Material - Static Site Generator]) net([Internet]) prevweb([Stake Holders Private Preview Website]) proweb([Production Website]) vsc([VScode - Command and Control]) Iterative Website Development Stack The Iterative Development teams use the Iterative Website Development Stack technologies The core technologies of Iterative WebsiteDevelopment are Git , the GitHu GitHub central project repository controlled by the project gatekeeper, using Local Website Repository, the content delivery network, like Cloudflare, to deploying private Preview Internet websites, production websites, and . The core technologies of Iterative Development are Git , GitHub, and the Central Website Repository controlled by the project gatekeeper, and a Content Delivery Network (CDN), like Cloudflare, deploying Private Preview Internet websites, production websites, and individual team members Private Preview websites. Team Developers \u00b6 Local Website Repository Each team developer has their own Local Website Repository that can be updated from the Central Website Repository. Team members cannot update the Central Web Repository directly. They submit their changes. The approved changes by the project gatekeeper are added to the Central Website Repository. Team members can then update their Local Website Repository. VScode Developers use VSCode as their Web Development Stack Command and Control center. They use it to edit code using their Local Website Repository, commit changes to the Central Website Repository, refresh their Local Website Repository, and deploy Private Preview Internet websites for themselves and stake holders to view and give feedback GitHub \u00b6 GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project The Central Website Repository is managed by a team member project gatekeeper with help from other team members Reference GitHub Details MkDocs Material - Static Site Generator \u00b6 Is a Static Site Generator used to build a website from Repository to create: A Local Preview Website for the developer The Production Website deployed to the Internet Stake Holders Private Preview Website It is also used by the Content Delivery network(CDN) do build and deploy the production website from the Central Repository Content Delivery Network (CDN) A \"MkDocs Static Site Generator\" tools are used to create the \"Production Website\" by the \"CDN - Deploy Website to Web\" ===== GitHubQ Central Repository. The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare, deploying private Preview Internet websites, production websites, and individual team members private Preview websites. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. The Central Repository is managed my a team member It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and possible defects created if Team members were to directly make changes to the central project repository. A solution to this problem is to have one central repository controlled by a team member gatekeeper. Each team member forks a copy of central project repository to their GetHub account and makes a clone of it on their workstation. Each developer makes changes to their repository clone . They cannot directly make changes to the central repository. Team members commit changes to their local repository clone They may deploy their local repository to a private Preview Internet website for stakeholders to see and give feedback. The process is managed using GitHub for Teams . When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub Pull Request is made by developers to the central project repository. Project team members and the gatekeeper are notified by GitHub of the Pull Request request. They may examine, comment on, suggest possible changes, and test the code. When the team agrees on committed developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for all developer committed changes. Iterations of the central project repository may be deployed by the gatekeeper to a private Preview for stakeholders viewing. The next step is each developer Pulls the central repository changes and commits them to their local repository copy of the central project. This process keeps team members up to date on changes. The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Development Diagram"},{"location":"website_dev_stack/#team-developers","text":"Local Website Repository Each team developer has their own Local Website Repository that can be updated from the Central Website Repository. Team members cannot update the Central Web Repository directly. They submit their changes. The approved changes by the project gatekeeper are added to the Central Website Repository. Team members can then update their Local Website Repository. VScode Developers use VSCode as their Web Development Stack Command and Control center. They use it to edit code using their Local Website Repository, commit changes to the Central Website Repository, refresh their Local Website Repository, and deploy Private Preview Internet websites for themselves and stake holders to view and give feedback","title":"Team Developers"},{"location":"website_dev_stack/#github","text":"GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project The Central Website Repository is managed by a team member project gatekeeper with help from other team members Reference GitHub Details","title":"GitHub"},{"location":"website_dev_stack/#mkdocs-material-static-site-generator","text":"Is a Static Site Generator used to build a website from Repository to create: A Local Preview Website for the developer The Production Website deployed to the Internet Stake Holders Private Preview Website It is also used by the Content Delivery network(CDN) do build and deploy the production website from the Central Repository Content Delivery Network (CDN) A \"MkDocs Static Site Generator\" tools are used to create the \"Production Website\" by the \"CDN - Deploy Website to Web\" ===== GitHubQ Central Repository. The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare, deploying private Preview Internet websites, production websites, and individual team members private Preview websites. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. The Central Repository is managed my a team member It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and possible defects created if Team members were to directly make changes to the central project repository. A solution to this problem is to have one central repository controlled by a team member gatekeeper. Each team member forks a copy of central project repository to their GetHub account and makes a clone of it on their workstation. Each developer makes changes to their repository clone . They cannot directly make changes to the central repository. Team members commit changes to their local repository clone They may deploy their local repository to a private Preview Internet website for stakeholders to see and give feedback. The process is managed using GitHub for Teams . When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub Pull Request is made by developers to the central project repository. Project team members and the gatekeeper are notified by GitHub of the Pull Request request. They may examine, comment on, suggest possible changes, and test the code. When the team agrees on committed developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for all developer committed changes. Iterations of the central project repository may be deployed by the gatekeeper to a private Preview for stakeholders viewing. The next step is each developer Pulls the central repository changes and commits them to their local repository copy of the central project. This process keeps team members up to date on changes. The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"MkDocs Material - Static Site Generator"}]}